{"ast":null,"code":"class BowlingGame {\n  constructor() {\n    this.roll = pins => this.rolls[this.currentRole++] = pins;\n\n    this.reset = () => {\n      this.rolls = [];\n      this.currentRole = 0;\n    };\n\n    this.standingPins = () => {\n      const scoreData = this.score();\n      let standingPins = this.maxScore;\n      scoreData.forEach(o => {\n        if (o.standingPins !== null && !isNaN(o.standingPins)) {\n          standingPins = o.standingPins;\n        }\n      });\n      return standingPins;\n    };\n\n    this.score = () => {\n      let scoreData = [];\n      let score = 0;\n      let frameIndex = 0;\n\n      const roll1 = () => this.rolls[frameIndex];\n\n      const roll2 = () => this.rolls[frameIndex + 1];\n\n      const roll3 = () => this.rolls[frameIndex + 2];\n\n      const frameTotal = () => roll1() + roll2();\n\n      const spareBonus = () => roll3();\n\n      const strikeBonus = () => roll2() + roll3();\n\n      const isStrike = () => roll1() === this.maxScore;\n\n      const isSpare = () => frameTotal() === this.maxScore;\n\n      const saveFrame = (scoreData, leftBox, rightBox, score, standingPins) => {\n        if (scoreData.length < 9) {\n          scoreData.push({\n            leftBox,\n            rightBox,\n            cumulativeScore: score,\n            standingPins\n          });\n        } else {\n          const box1 = roll1() === this.maxScore ? \"X\" : roll1();\n          const box2 = roll2() === this.maxScore ? \"X\" : isSpare() ? \"/\" : roll2();\n          let box3;\n\n          if (roll3() === this.maxScore) {\n            box3 = \"X\";\n          } else if (roll1() === this.maxScore || roll1() + roll2() === this.maxScore) {\n            box3 = roll3();\n          } else {\n            box3 = \"\";\n          }\n\n          scoreData.push({\n            leftBox: box1,\n            rightBox: box2,\n            cumulativeScore: score,\n            standingPins,\n            extraBox: box3\n          });\n        }\n      };\n\n      [...Array(10)].forEach((_, frame) => {\n        if (isStrike()) {\n          score += 10 + strikeBonus();\n          saveFrame(scoreData, \"\", \"X\", score, this.maxScore);\n          frameIndex++;\n        } else if (isSpare()) {\n          score += 10 + spareBonus();\n          saveFrame(scoreData, roll1(), \"/\", score, this.maxScore);\n          frameIndex += 2;\n        } else {\n          score += frameTotal();\n          const standingPins = roll2() !== undefined ? this.maxScore : this.maxScore - roll1();\n          saveFrame(scoreData, roll1(), roll2(), score, standingPins);\n          frameIndex += 2;\n        }\n      });\n      return scoreData;\n    };\n\n    this.rolls = [];\n    this.currentRole = 0;\n    let maxScore = 10;\n  }\n\n}\n\nBowlingGame.create = () => new BowlingGame();\n\nexport default BowlingGame;","map":{"version":3,"sources":["/Users/mattginsberg/Desktop/bowling-app/src/components/BowlingGame.js"],"names":["BowlingGame","constructor","roll","pins","rolls","currentRole","reset","standingPins","scoreData","score","maxScore","forEach","o","isNaN","frameIndex","roll1","roll2","roll3","frameTotal","spareBonus","strikeBonus","isStrike","isSpare","saveFrame","leftBox","rightBox","length","push","cumulativeScore","box1","box2","box3","extraBox","Array","_","frame","undefined","create"],"mappings":"AAAA,MAAMA,WAAN,CAAkB;AAChBC,EAAAA,WAAW,GAAG;AAAA,SAQdC,IARc,GAQPC,IAAI,IAAK,KAAKC,KAAL,CAAW,KAAKC,WAAL,EAAX,IAAiCF,IARnC;;AAAA,SAUdG,KAVc,GAUN,MAAM;AACZ,WAAKF,KAAL,GAAa,EAAb;AACA,WAAKC,WAAL,GAAmB,CAAnB;AACD,KAba;;AAAA,SAedE,YAfc,GAeC,MAAM;AACnB,YAAMC,SAAS,GAAG,KAAKC,KAAL,EAAlB;AACA,UAAIF,YAAY,GAAG,KAAKG,QAAxB;AACAF,MAAAA,SAAS,CAACG,OAAV,CAAkBC,CAAC,IAAI;AACrB,YAAIA,CAAC,CAACL,YAAF,KAAmB,IAAnB,IAA2B,CAACM,KAAK,CAACD,CAAC,CAACL,YAAH,CAArC,EAAuD;AACrDA,UAAAA,YAAY,GAAGK,CAAC,CAACL,YAAjB;AACD;AACF,OAJD;AAKA,aAAOA,YAAP;AACD,KAxBa;;AAAA,SA2BdE,KA3Bc,GA2BN,MAAM;AACZ,UAAID,SAAS,GAAG,EAAhB;AACA,UAAIC,KAAK,GAAG,CAAZ;AACA,UAAIK,UAAU,GAAG,CAAjB;;AAEA,YAAMC,KAAK,GAAG,MAAM,KAAKX,KAAL,CAAWU,UAAX,CAApB;;AACA,YAAME,KAAK,GAAG,MAAM,KAAKZ,KAAL,CAAWU,UAAU,GAAG,CAAxB,CAApB;;AACA,YAAMG,KAAK,GAAG,MAAM,KAAKb,KAAL,CAAWU,UAAU,GAAG,CAAxB,CAApB;;AAEA,YAAMI,UAAU,GAAG,MAAMH,KAAK,KAAKC,KAAK,EAAxC;;AAEA,YAAMG,UAAU,GAAG,MAAMF,KAAK,EAA9B;;AAEA,YAAMG,WAAW,GAAG,MAAMJ,KAAK,KAAKC,KAAK,EAAzC;;AAEA,YAAMI,QAAQ,GAAG,MAAMN,KAAK,OAAO,KAAKL,QAAxC;;AAEA,YAAMY,OAAO,GAAG,MAAMJ,UAAU,OAAO,KAAKR,QAA5C;;AAEA,YAAMa,SAAS,GAAG,CAACf,SAAD,EAAYgB,OAAZ,EAAqBC,QAArB,EAA+BhB,KAA/B,EAAsCF,YAAtC,KAAuD;AACvE,YAAIC,SAAS,CAACkB,MAAV,GAAmB,CAAvB,EAA0B;AACxBlB,UAAAA,SAAS,CAACmB,IAAV,CAAe;AACbH,YAAAA,OADa;AAEbC,YAAAA,QAFa;AAGbG,YAAAA,eAAe,EAAEnB,KAHJ;AAIbF,YAAAA;AAJa,WAAf;AAMD,SAPD,MAOO;AACL,gBAAMsB,IAAI,GAAGd,KAAK,OAAO,KAAKL,QAAjB,GAA4B,GAA5B,GAAkCK,KAAK,EAApD;AACA,gBAAMe,IAAI,GAAGd,KAAK,OAAO,KAAKN,QAAjB,GAA4B,GAA5B,GAAkCY,OAAO,KAAK,GAAL,GAAWN,KAAK,EAAtE;AACA,cAAIe,IAAJ;;AACA,cAAId,KAAK,OAAO,KAAKP,QAArB,EAA+B;AAC7BqB,YAAAA,IAAI,GAAG,GAAP;AACD,WAFD,MAEO,IAAIhB,KAAK,OAAO,KAAKL,QAAjB,IAA6BK,KAAK,KAAKC,KAAK,EAAf,KAAsB,KAAKN,QAA5D,EAAsE;AAC3EqB,YAAAA,IAAI,GAAGd,KAAK,EAAZ;AACD,WAFM,MAEA;AACLc,YAAAA,IAAI,GAAG,EAAP;AACD;;AAEDvB,UAAAA,SAAS,CAACmB,IAAV,CAAe;AACbH,YAAAA,OAAO,EAAEK,IADI;AAEbJ,YAAAA,QAAQ,EAAEK,IAFG;AAGbF,YAAAA,eAAe,EAAEnB,KAHJ;AAIbF,YAAAA,YAJa;AAKbyB,YAAAA,QAAQ,EAAED;AALG,WAAf;AAOD;AACF,OA5BD;;AA8BA,OAAC,GAAGE,KAAK,CAAC,EAAD,CAAT,EAAetB,OAAf,CAAuB,CAACuB,CAAD,EAAIC,KAAJ,KAAc;AACnC,YAAId,QAAQ,EAAZ,EAAgB;AACdZ,UAAAA,KAAK,IAAI,KAAKW,WAAW,EAAzB;AACAG,UAAAA,SAAS,CAACf,SAAD,EAAY,EAAZ,EAAgB,GAAhB,EAAqBC,KAArB,EAA4B,KAAKC,QAAjC,CAAT;AACAI,UAAAA,UAAU;AACX,SAJD,MAIO,IAAIQ,OAAO,EAAX,EAAe;AACpBb,UAAAA,KAAK,IAAI,KAAKU,UAAU,EAAxB;AACAI,UAAAA,SAAS,CAACf,SAAD,EAAYO,KAAK,EAAjB,EAAqB,GAArB,EAA0BN,KAA1B,EAAiC,KAAKC,QAAtC,CAAT;AACAI,UAAAA,UAAU,IAAI,CAAd;AACD,SAJM,MAIA;AACLL,UAAAA,KAAK,IAAIS,UAAU,EAAnB;AACA,gBAAMX,YAAY,GAAGS,KAAK,OAAOoB,SAAZ,GAAwB,KAAK1B,QAA7B,GAAwC,KAAKA,QAAL,GAAgBK,KAAK,EAAlF;AACAQ,UAAAA,SAAS,CAACf,SAAD,EAAYO,KAAK,EAAjB,EAAqBC,KAAK,EAA1B,EAA8BP,KAA9B,EAAqCF,YAArC,CAAT;AACAO,UAAAA,UAAU,IAAI,CAAd;AACD;AACF,OAfD;AAiBA,aAAON,SAAP;AACD,KA9Fa;;AACZ,SAAKJ,KAAL,GAAa,EAAb;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACA,QAAIK,QAAQ,GAAG,EAAf;AACD;;AALe;;AAAZV,W,CAOGqC,M,GAAS,MAAM,IAAIrC,WAAJ,E;;AA2FxB,eAAeA,WAAf","sourcesContent":["class BowlingGame {\n  constructor() {\n    this.rolls = [];\n    this.currentRole = 0;\n    let maxScore = 10;\n  }\n\n  static create = () => new BowlingGame();\n\n  roll = pins => (this.rolls[this.currentRole++] = pins);\n\n  reset = () => {\n    this.rolls = [];\n    this.currentRole = 0;\n  };\n\n  standingPins = () => {\n    const scoreData = this.score();\n    let standingPins = this.maxScore;\n    scoreData.forEach(o => {\n      if (o.standingPins !== null && !isNaN(o.standingPins)) {\n        standingPins = o.standingPins;\n      }\n    });\n    return standingPins;\n  };\n\n\n  score = () => {\n    let scoreData = [];\n    let score = 0;\n    let frameIndex = 0;\n\n    const roll1 = () => this.rolls[frameIndex];\n    const roll2 = () => this.rolls[frameIndex + 1];\n    const roll3 = () => this.rolls[frameIndex + 2];\n\n    const frameTotal = () => roll1() + roll2();\n\n    const spareBonus = () => roll3();\n\n    const strikeBonus = () => roll2() + roll3();\n\n    const isStrike = () => roll1() === this.maxScore;\n\n    const isSpare = () => frameTotal() === this.maxScore;\n\n    const saveFrame = (scoreData, leftBox, rightBox, score, standingPins) => {\n      if (scoreData.length < 9) {\n        scoreData.push({\n          leftBox,\n          rightBox,\n          cumulativeScore: score,\n          standingPins\n        });\n      } else {\n        const box1 = roll1() === this.maxScore ? \"X\" : roll1();\n        const box2 = roll2() === this.maxScore ? \"X\" : isSpare() ? \"/\" : roll2();\n        let box3;\n        if (roll3() === this.maxScore) {\n          box3 = \"X\";\n        } else if (roll1() === this.maxScore || roll1() + roll2() === this.maxScore) {\n          box3 = roll3();\n        } else {\n          box3 = \"\";\n        }\n\n        scoreData.push({\n          leftBox: box1,\n          rightBox: box2,\n          cumulativeScore: score,\n          standingPins,\n          extraBox: box3\n        });\n      }\n    };\n\n    [...Array(10)].forEach((_, frame) => {\n      if (isStrike()) {\n        score += 10 + strikeBonus();\n        saveFrame(scoreData, \"\", \"X\", score, this.maxScore);\n        frameIndex++;\n      } else if (isSpare()) {\n        score += 10 + spareBonus();\n        saveFrame(scoreData, roll1(), \"/\", score, this.maxScore);\n        frameIndex += 2;\n      } else {\n        score += frameTotal();\n        const standingPins = roll2() !== undefined ? this.maxScore : this.maxScore - roll1();\n        saveFrame(scoreData, roll1(), roll2(), score, standingPins);\n        frameIndex += 2;\n      }\n    });\n\n    return scoreData;\n  };\n}\n\nexport default BowlingGame;\n"]},"metadata":{},"sourceType":"module"}