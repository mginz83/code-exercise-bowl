{"ast":null,"code":"import { frameSum, isStrike, isSpare, bonusForStrike, bonusForSpare } from './HelperFunctions';\n\nclass BowlingGame {\n  constructor() {\n    this.roll = pins => this.rolls[this.currentRoll++] = pins;\n\n    this.standingPins = () => {\n      const scoreData = this.score();\n      let stillStanding = 10;\n      scoreData.forEach(score => {\n        if (score.stillStanding !== null && !isNaN(score.stillStanding)) {\n          stillStanding = score.stillStanding;\n        }\n      });\n      return stillStanding;\n    };\n\n    this.restartGame = () => {\n      this.rolls = [];\n      this.currentRoll = 0;\n    };\n\n    this.score = () => {\n      let scoreData = [];\n      let score = 0;\n      let frameIndex = 0;\n\n      const roll1 = () => this.rolls[frameIndex];\n\n      const roll2 = () => this.rolls[frameIndex + 1];\n\n      const roll3 = () => this.rolls[frameIndex + 2];\n\n      const saveFrame = (scoreData, leftBox, rightBox, score, pinsUp) => {\n        if (scoreData.length < 9) {\n          scoreData.push({\n            leftBox,\n            rightBox,\n            cumulativeScore: score,\n            pinsUp\n          });\n        } else {\n          const box1 = roll1() === 10 ? \"X\" : roll1();\n          const box2 = roll2() === 10 ? \"X\" : isSpare() ? \"/\" : roll2();\n          let box3;\n\n          if (roll3() === 10) {\n            box3 = \"X\";\n          } else if (roll1() === 10 || roll1() + roll2() === 10) {\n            box3 = roll3();\n          } else {\n            box3 = \"\";\n          }\n\n          scoreData.push({\n            leftBox: box1,\n            rightBox: box2,\n            cumulativeScore: score,\n            pinsUp,\n            extraBox: box3,\n            gameover: isNaN(score) ? false : false\n          });\n        }\n      };\n\n      [...Array(10)].forEach((_, frame) => {\n        if (isStrike(roll1())) {\n          score += 10 + bonusForStrike(roll2(), roll3());\n          saveFrame(scoreData, \"\", \"X\", score, 10);\n          frameIndex++;\n        } else if (isSpare(roll1(), roll2())) {\n          score += 10 + bonusForSpare(roll3());\n          saveFrame(scoreData, roll1(), \"/\", score, 10);\n          frameIndex += 2;\n        } else {\n          score += frameSum(roll1(), roll2());\n          const pinsUp = roll2() !== undefined ? 10 : 10 - roll1();\n          saveFrame(scoreData, roll1(), roll2(), score, pinsUp);\n          frameIndex += 2;\n        }\n      });\n      return scoreData;\n    };\n\n    this.rolls = [];\n    this.currentRoll = 0;\n    this.maxScore = 10;\n  }\n\n}\n\nBowlingGame.createNewBowlingGame = () => new BowlingGame();\n\nexport default BowlingGame;","map":{"version":3,"sources":["/Users/mattginsberg/Desktop/bowling-app/src/components/BowlingGame.js"],"names":["frameSum","isStrike","isSpare","bonusForStrike","bonusForSpare","BowlingGame","constructor","roll","pins","rolls","currentRoll","standingPins","scoreData","score","stillStanding","forEach","isNaN","restartGame","frameIndex","roll1","roll2","roll3","saveFrame","leftBox","rightBox","pinsUp","length","push","cumulativeScore","box1","box2","box3","extraBox","gameover","Array","_","frame","undefined","maxScore","createNewBowlingGame"],"mappings":"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","sourcesContent":["import { frameSum, isStrike, isSpare, bonusForStrike, bonusForSpare} from './HelperFunctions';\n\nclass BowlingGame {\n  constructor() {\n    this.rolls = [];\n    this.currentRoll = 0;\n    this.maxScore = 10;\n  }\n\n  static createNewBowlingGame = () => new BowlingGame();\n\n  roll = pins => (this.rolls[this.currentRoll++] = pins);\n\n\n\n  standingPins = () => {\n    const scoreData = this.score();\n    let stillStanding = 10;\n    scoreData.forEach(score => {\n      if (score.stillStanding !== null && !isNaN(score.stillStanding)) {\n        stillStanding = score.stillStanding;\n      }\n    });\n    return stillStanding;\n  };\n\n  /*\n    If we click on reset game, reset everything.\n  */\n  restartGame = () => {\n    this.rolls = [];\n    this.currentRoll = 0;\n  };\n\n  score = () => {\n    let scoreData = [];\n    let score = 0;\n    let frameIndex = 0;\n\n    const roll1 = () => this.rolls[frameIndex];\n    const roll2 = () => this.rolls[frameIndex + 1];\n    const roll3 = () => this.rolls[frameIndex + 2];\n\n    const saveFrame = (scoreData, leftBox, rightBox, score, pinsUp) => {\n      if (scoreData.length < 9) {\n        scoreData.push({\n          leftBox,\n          rightBox,\n          cumulativeScore: score,\n          pinsUp\n        });\n      } else {\n        const box1 = roll1() === 10 ? \"X\" : roll1();\n        const box2 = roll2() === 10 ? \"X\" : isSpare() ? \"/\" : roll2();\n        let box3;\n        if (roll3() === 10) {\n          box3 = \"X\";\n        } else if (roll1() === 10 || roll1() + roll2() === 10) {\n          box3 = roll3();\n        } else {\n          box3 = \"\";\n        }\n\n        scoreData.push({\n          leftBox: box1,\n          rightBox: box2,\n          cumulativeScore: score,\n          pinsUp,\n          extraBox: box3,\n          gameover: isNaN(score) ? false : false\n        });\n      }\n    };\n\n    [...Array(10)].forEach((_, frame) => {\n      if (isStrike(roll1())) {\n        score += 10 + bonusForStrike(roll2(), roll3());\n        saveFrame(scoreData, \"\", \"X\", score, 10);\n        frameIndex++;\n      } else if (isSpare(roll1(), roll2())) {\n        score += 10 + bonusForSpare(roll3());\n        saveFrame(scoreData, roll1(), \"/\", score, 10);\n        frameIndex += 2;\n      } else {\n        score += frameSum(roll1(), roll2());\n        const pinsUp = roll2() !== undefined ? 10 : 10 - roll1();\n        saveFrame(scoreData, roll1(), roll2(), score, pinsUp);\n        frameIndex += 2;\n      }\n    });\n\n    return scoreData;\n  };\n}\n\nexport default BowlingGame;\n"]},"metadata":{},"sourceType":"module"}