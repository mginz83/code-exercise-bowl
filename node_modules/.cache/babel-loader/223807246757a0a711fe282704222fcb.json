{"ast":null,"code":"import { frameSum, isStrike, isSpare, bonusForStrike, bonusForSpare } from './HelperFunctions';\n\nclass BowlingGame {\n  constructor() {\n    this.roll = pinsDown => this.rolls[this.currentRoll++] = pinsDown;\n\n    this.standingPins = () => {\n      const bowlingScore = this.calcScore();\n      let stillStanding = this.maxScore;\n      bowlingScore.forEach(score => {\n        if (score.pinsStillStanding !== null && !isNaN(score.pinsStillStanding)) {\n          stillStanding = score.pinsStillStanding;\n        }\n      });\n      return stillStanding;\n    };\n\n    this.restartGame = () => {\n      this.rolls = [];\n      this.currentRoll = 0;\n    };\n\n    this.calcScore = () => {\n      let bowlingScore = [];\n      let score = 0;\n      let frameIndex = 0;\n\n      const roll1 = () => this.rolls[frameIndex];\n\n      const roll2 = () => this.rolls[frameIndex + 1];\n\n      const roll3 = () => this.rolls[frameIndex + 2];\n\n      const saveFrame = (bowlingScore, firstRollBox, secondRollBox, score, pinsStillStanding) => {\n        if (bowlingScore.length < 9) {\n          bowlingScore.push({\n            firstRollBox,\n            secondRollBox,\n            cumulativeScore: score,\n            pinsStillStanding\n          });\n        } else {\n          const scoreBoardBox1 = roll1() === this.maxScore ? \"X\" : roll1();\n          const scoreBoardBox2 = roll2() === this.maxScore ? \"X\" : isSpare() ? \"/\" : roll2();\n          let scoreBoardExtraBox;\n\n          if (roll3() === this.maxScore) {\n            scoreBoardExtraBox = \"X\";\n          } else if (roll1() === this.maxScore || roll1() + roll2() === this.maxScore) {\n            scoreBoardExtraBox = roll3();\n          } else {\n            scoreBoardExtraBox = \"\";\n          }\n\n          bowlingScore.push({\n            firstRollBox: scoreBoardBox1,\n            secondRollBox: scoreBoardBox2,\n            cumulativeScore: score,\n            pinsStillStanding,\n            finalRollBox: scoreBoardExtraBox,\n            gameover: isNaN(score) ? false : true\n          });\n        }\n      };\n\n      [...Array(this.maxScore)].forEach((_, frame) => {\n        if (isStrike(roll1())) {\n          score += this.maxScore + bonusForStrike(roll2(), roll3());\n          saveFrame(bowlingScore, \"\", \"X\", score, this.maxScore);\n          frameIndex++;\n        } else if (isSpare(roll1(), roll2())) {\n          score += this.maxScore + bonusForSpare(roll3());\n          saveFrame(bowlingScore, roll1(), \"/\", score, this.maxScore);\n          frameIndex += 2;\n        } else {\n          score += frameSum(roll1(), roll2());\n          const pinsUp = roll2() !== undefined ? this.maxScore : this.maxScore - roll1();\n          saveFrame(bowlingScore, roll1(), roll2(), score, pinsUp);\n          frameIndex += 2;\n        }\n      });\n      return bowlingScore;\n    };\n\n    this.rolls = [];\n    this.currentRoll = 0;\n    this.maxScore = 10;\n  }\n\n}\n\nBowlingGame.createNewBowlingGame = () => new BowlingGame();\n\nexport default BowlingGame;","map":{"version":3,"sources":["/Users/mattginsberg/Desktop/bowling-app/src/components/BowlingGame.js"],"names":["frameSum","isStrike","isSpare","bonusForStrike","bonusForSpare","BowlingGame","constructor","roll","pinsDown","rolls","currentRoll","standingPins","bowlingScore","calcScore","stillStanding","maxScore","forEach","score","pinsStillStanding","isNaN","restartGame","frameIndex","roll1","roll2","roll3","saveFrame","firstRollBox","secondRollBox","length","push","cumulativeScore","scoreBoardBox1","scoreBoardBox2","scoreBoardExtraBox","finalRollBox","gameover","Array","_","frame","pinsUp","undefined","createNewBowlingGame"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,QAAnB,EAA6BC,OAA7B,EAAsCC,cAAtC,EAAsDC,aAAtD,QAA0E,mBAA1E;;AAEA,MAAMC,WAAN,CAAkB;AAChBC,EAAAA,WAAW,GAAG;AAAA,SAQdC,IARc,GAQPC,QAAQ,IAAK,KAAKC,KAAL,CAAW,KAAKC,WAAL,EAAX,IAAiCF,QARvC;;AAAA,SAUdG,YAVc,GAUC,MAAM;AACnB,YAAMC,YAAY,GAAG,KAAKC,SAAL,EAArB;AACA,UAAIC,aAAa,GAAG,KAAKC,QAAzB;AACAH,MAAAA,YAAY,CAACI,OAAb,CAAqBC,KAAK,IAAI;AAC5B,YAAIA,KAAK,CAACC,iBAAN,KAA4B,IAA5B,IAAoC,CAACC,KAAK,CAACF,KAAK,CAACC,iBAAP,CAA9C,EAAyE;AACvEJ,UAAAA,aAAa,GAAGG,KAAK,CAACC,iBAAtB;AACD;AACF,OAJD;AAKA,aAAOJ,aAAP;AACD,KAnBa;;AAAA,SAwBdM,WAxBc,GAwBA,MAAM;AAClB,WAAKX,KAAL,GAAa,EAAb;AACA,WAAKC,WAAL,GAAmB,CAAnB;AACD,KA3Ba;;AAAA,SA6BdG,SA7Bc,GA6BF,MAAM;AAChB,UAAID,YAAY,GAAG,EAAnB;AACA,UAAIK,KAAK,GAAG,CAAZ;AACA,UAAII,UAAU,GAAG,CAAjB;;AAEA,YAAMC,KAAK,GAAG,MAAM,KAAKb,KAAL,CAAWY,UAAX,CAApB;;AACA,YAAME,KAAK,GAAG,MAAM,KAAKd,KAAL,CAAWY,UAAU,GAAG,CAAxB,CAApB;;AACA,YAAMG,KAAK,GAAG,MAAM,KAAKf,KAAL,CAAWY,UAAU,GAAG,CAAxB,CAApB;;AAEA,YAAMI,SAAS,GAAG,CAACb,YAAD,EAAec,YAAf,EAA6BC,aAA7B,EAA4CV,KAA5C,EAAmDC,iBAAnD,KAAyE;AACzF,YAAIN,YAAY,CAACgB,MAAb,GAAsB,CAA1B,EAA6B;AAC3BhB,UAAAA,YAAY,CAACiB,IAAb,CAAkB;AAChBH,YAAAA,YADgB;AAEhBC,YAAAA,aAFgB;AAGhBG,YAAAA,eAAe,EAAEb,KAHD;AAIhBC,YAAAA;AAJgB,WAAlB;AAMD,SAPD,MAOO;AACL,gBAAMa,cAAc,GAAGT,KAAK,OAAO,KAAKP,QAAjB,GAA4B,GAA5B,GAAkCO,KAAK,EAA9D;AACA,gBAAMU,cAAc,GAAGT,KAAK,OAAO,KAAKR,QAAjB,GAA4B,GAA5B,GAAkCb,OAAO,KAAK,GAAL,GAAWqB,KAAK,EAAhF;AACA,cAAIU,kBAAJ;;AACA,cAAIT,KAAK,OAAO,KAAKT,QAArB,EAA+B;AAC7BkB,YAAAA,kBAAkB,GAAG,GAArB;AACD,WAFD,MAEO,IAAIX,KAAK,OAAO,KAAKP,QAAjB,IAA6BO,KAAK,KAAKC,KAAK,EAAf,KAAsB,KAAKR,QAA5D,EAAsE;AAC3EkB,YAAAA,kBAAkB,GAAGT,KAAK,EAA1B;AACD,WAFM,MAEA;AACLS,YAAAA,kBAAkB,GAAG,EAArB;AACD;;AAEDrB,UAAAA,YAAY,CAACiB,IAAb,CAAkB;AAChBH,YAAAA,YAAY,EAAEK,cADE;AAEhBJ,YAAAA,aAAa,EAAEK,cAFC;AAGhBF,YAAAA,eAAe,EAAEb,KAHD;AAIhBC,YAAAA,iBAJgB;AAKhBgB,YAAAA,YAAY,EAAED,kBALE;AAMhBE,YAAAA,QAAQ,EAAEhB,KAAK,CAACF,KAAD,CAAL,GAAe,KAAf,GAAuB;AANjB,WAAlB;AAQD;AACF,OA7BD;;AA+BA,OAAC,GAAGmB,KAAK,CAAC,KAAKrB,QAAN,CAAT,EAA0BC,OAA1B,CAAkC,CAACqB,CAAD,EAAIC,KAAJ,KAAc;AAC9C,YAAIrC,QAAQ,CAACqB,KAAK,EAAN,CAAZ,EAAuB;AACrBL,UAAAA,KAAK,IAAI,KAAKF,QAAL,GAAgBZ,cAAc,CAACoB,KAAK,EAAN,EAAUC,KAAK,EAAf,CAAvC;AACAC,UAAAA,SAAS,CAACb,YAAD,EAAe,EAAf,EAAmB,GAAnB,EAAwBK,KAAxB,EAA+B,KAAKF,QAApC,CAAT;AACAM,UAAAA,UAAU;AACX,SAJD,MAIO,IAAInB,OAAO,CAACoB,KAAK,EAAN,EAAUC,KAAK,EAAf,CAAX,EAA+B;AACpCN,UAAAA,KAAK,IAAI,KAAKF,QAAL,GAAgBX,aAAa,CAACoB,KAAK,EAAN,CAAtC;AACAC,UAAAA,SAAS,CAACb,YAAD,EAAeU,KAAK,EAApB,EAAwB,GAAxB,EAA6BL,KAA7B,EAAoC,KAAKF,QAAzC,CAAT;AACAM,UAAAA,UAAU,IAAI,CAAd;AACD,SAJM,MAIA;AACLJ,UAAAA,KAAK,IAAIjB,QAAQ,CAACsB,KAAK,EAAN,EAAUC,KAAK,EAAf,CAAjB;AACA,gBAAMgB,MAAM,GAAGhB,KAAK,OAAOiB,SAAZ,GAAwB,KAAKzB,QAA7B,GAAwC,KAAKA,QAAL,GAAgBO,KAAK,EAA5E;AACAG,UAAAA,SAAS,CAACb,YAAD,EAAeU,KAAK,EAApB,EAAwBC,KAAK,EAA7B,EAAiCN,KAAjC,EAAwCsB,MAAxC,CAAT;AACAlB,UAAAA,UAAU,IAAI,CAAd;AACD;AACF,OAfD;AAiBA,aAAOT,YAAP;AACD,KAvFa;;AACZ,SAAKH,KAAL,GAAa,EAAb;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACA,SAAKK,QAAL,GAAgB,EAAhB;AACD;;AALe;;AAAZV,W,CAOGoC,oB,GAAuB,MAAM,IAAIpC,WAAJ,E;;AAoFtC,eAAeA,WAAf","sourcesContent":["import { frameSum, isStrike, isSpare, bonusForStrike, bonusForSpare} from './HelperFunctions';\n\nclass BowlingGame {\n  constructor() {\n    this.rolls = [];\n    this.currentRoll = 0;\n    this.maxScore = 10;\n  }\n\n  static createNewBowlingGame = () => new BowlingGame();\n\n  roll = pinsDown => (this.rolls[this.currentRoll++] = pinsDown);\n\n  standingPins = () => {\n    const bowlingScore = this.calcScore();\n    let stillStanding = this.maxScore;\n    bowlingScore.forEach(score => {\n      if (score.pinsStillStanding !== null && !isNaN(score.pinsStillStanding)) {\n        stillStanding = score.pinsStillStanding;\n      }\n    });\n    return stillStanding;\n  };\n\n  /*\n    If we click on reset game, reset everything.\n  */\n  restartGame = () => {\n    this.rolls = [];\n    this.currentRoll = 0;\n  };\n\n  calcScore = () => {\n    let bowlingScore = [];\n    let score = 0;\n    let frameIndex = 0;\n\n    const roll1 = () => this.rolls[frameIndex];\n    const roll2 = () => this.rolls[frameIndex + 1];\n    const roll3 = () => this.rolls[frameIndex + 2];\n\n    const saveFrame = (bowlingScore, firstRollBox, secondRollBox, score, pinsStillStanding) => {\n      if (bowlingScore.length < 9) {\n        bowlingScore.push({\n          firstRollBox,\n          secondRollBox,\n          cumulativeScore: score,\n          pinsStillStanding\n        });\n      } else {\n        const scoreBoardBox1 = roll1() === this.maxScore ? \"X\" : roll1();\n        const scoreBoardBox2 = roll2() === this.maxScore ? \"X\" : isSpare() ? \"/\" : roll2();\n        let scoreBoardExtraBox;\n        if (roll3() === this.maxScore) {\n          scoreBoardExtraBox = \"X\";\n        } else if (roll1() === this.maxScore || roll1() + roll2() === this.maxScore) {\n          scoreBoardExtraBox = roll3();\n        } else {\n          scoreBoardExtraBox = \"\";\n        }\n\n        bowlingScore.push({\n          firstRollBox: scoreBoardBox1,\n          secondRollBox: scoreBoardBox2,\n          cumulativeScore: score,\n          pinsStillStanding,\n          finalRollBox: scoreBoardExtraBox,\n          gameover: isNaN(score) ? false : true\n        });\n      }\n    };\n\n    [...Array(this.maxScore)].forEach((_, frame) => {\n      if (isStrike(roll1())) {\n        score += this.maxScore + bonusForStrike(roll2(), roll3());\n        saveFrame(bowlingScore, \"\", \"X\", score, this.maxScore);\n        frameIndex++;\n      } else if (isSpare(roll1(), roll2())) {\n        score += this.maxScore + bonusForSpare(roll3());\n        saveFrame(bowlingScore, roll1(), \"/\", score, this.maxScore);\n        frameIndex += 2;\n      } else {\n        score += frameSum(roll1(), roll2());\n        const pinsUp = roll2() !== undefined ? this.maxScore : this.maxScore - roll1();\n        saveFrame(bowlingScore, roll1(), roll2(), score, pinsUp);\n        frameIndex += 2;\n      }\n    });\n\n    return bowlingScore;\n  };\n}\n\nexport default BowlingGame;\n"]},"metadata":{},"sourceType":"module"}