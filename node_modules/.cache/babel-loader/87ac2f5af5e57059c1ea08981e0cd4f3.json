{"ast":null,"code":"class BowlingGame {\n  constructor() {\n    this.roll = pins => this.rolls[this.currentRole++] = pins;\n\n    this.reset = () => {\n      this.rolls = [];\n      this.currentRole = 0;\n    };\n\n    this.standingPins = () => {\n      const scoreData = this.score();\n      let standingPins = 10;\n      scoreData.forEach(o => {\n        if (o.standingPins !== null && !isNaN(o.standingPins)) {\n          standingPins = o.standingPins;\n        }\n      });\n      return standingPins;\n    };\n\n    this.score = () => {\n      let scoreData = [];\n      let score = 0;\n      let frameIndex = 0;\n\n      const roll1 = () => this.rolls[frameIndex];\n\n      const roll2 = () => this.rolls[frameIndex + 1];\n\n      const roll3 = () => this.rolls[frameIndex + 2];\n\n      const sumOfFrameRolls = () => roll1() + roll2();\n\n      const spareBonus = () => roll3();\n\n      const strikeBonus = () => roll2() + roll3();\n\n      const isStrike = () => roll1() === 10;\n\n      const isSpare = () => sumOfFrameRolls() === 10;\n\n      const saveFrame = (scoreData, leftBox, rightBox, score, standingPins) => {\n        if (scoreData.length < 9) {\n          scoreData.push({\n            leftBox,\n            rightBox,\n            cumulativeScore: score,\n            standingPins\n          });\n        } else {\n          const box1 = roll1() === 10 ? \"X\" : roll1();\n          const box2 = roll2() === 10 ? \"X\" : isSpare() ? \"/\" : roll2();\n          let box3;\n\n          if (roll3() === 10) {\n            box3 = \"X\";\n          } else if (roll1() === 10 || roll1() + roll2() === 10) {\n            box3 = roll3();\n          } else {\n            box3 = \"\";\n          }\n\n          scoreData.push({\n            leftBox: box1,\n            rightBox: box2,\n            cumulativeScore: score,\n            standingPins,\n            extraBox: box3\n          });\n        }\n      };\n\n      [...Array(10)].forEach((_, frame) => {\n        if (isStrike()) {\n          score += 10 + strikeBonus();\n          saveFrame(scoreData, \"\", \"X\", score, 10);\n          frameIndex++;\n        } else if (isSpare()) {\n          score += 10 + spareBonus();\n          saveFrame(scoreData, roll1(), \"/\", score, 10);\n          frameIndex += 2;\n        } else {\n          score += sumOfFrameRolls();\n          const standingPins = roll2() !== undefined ? 10 : 10 - roll1();\n          saveFrame(scoreData, roll1(), roll2(), score, standingPins);\n          frameIndex += 2;\n        }\n      });\n      return scoreData;\n    };\n\n    this.rolls = [];\n    this.currentRole = 0;\n  }\n\n}\n\nBowlingGame.create = () => new BowlingGame();\n\nexport default BowlingGame;","map":{"version":3,"sources":["/Users/mattginsberg/Desktop/bowling-app/src/components/BowlingGame.js"],"names":["BowlingGame","constructor","roll","pins","rolls","currentRole","reset","standingPins","scoreData","score","forEach","o","isNaN","frameIndex","roll1","roll2","roll3","sumOfFrameRolls","spareBonus","strikeBonus","isStrike","isSpare","saveFrame","leftBox","rightBox","length","push","cumulativeScore","box1","box2","box3","extraBox","Array","_","frame","undefined","create"],"mappings":"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","sourcesContent":["class BowlingGame {\n  constructor() {\n    this.rolls = [];\n    this.currentRole = 0;\n  }\n\n  static create = () => new BowlingGame();\n\n  roll = pins => (this.rolls[this.currentRole++] = pins);\n\n  reset = () => {\n    this.rolls = [];\n    this.currentRole = 0;\n  };\n\n  standingPins = () => {\n    const scoreData = this.score();\n    let standingPins = 10;\n    scoreData.forEach(o => {\n      if (o.standingPins !== null && !isNaN(o.standingPins)) {\n        standingPins = o.standingPins;\n      }\n    });\n    return standingPins;\n  };\n\n\n  score = () => {\n    let scoreData = [];\n    let score = 0;\n    let frameIndex = 0;\n\n    const roll1 = () => this.rolls[frameIndex];\n    const roll2 = () => this.rolls[frameIndex + 1];\n    const roll3 = () => this.rolls[frameIndex + 2];\n\n    const sumOfFrameRolls = () => roll1() + roll2();\n\n    const spareBonus = () => roll3();\n\n    const strikeBonus = () => roll2() + roll3();\n\n    const isStrike = () => roll1() === 10;\n\n    const isSpare = () => sumOfFrameRolls() === 10;\n\n    const saveFrame = (scoreData, leftBox, rightBox, score, standingPins) => {\n      if (scoreData.length < 9) {\n        scoreData.push({\n          leftBox,\n          rightBox,\n          cumulativeScore: score,\n          standingPins\n        });\n      } else {\n        const box1 = roll1() === 10 ? \"X\" : roll1();\n        const box2 = roll2() === 10 ? \"X\" : isSpare() ? \"/\" : roll2();\n        let box3;\n        if (roll3() === 10) {\n          box3 = \"X\";\n        } else if (roll1() === 10 || roll1() + roll2() === 10) {\n          box3 = roll3();\n        } else {\n          box3 = \"\";\n        }\n\n        scoreData.push({\n          leftBox: box1,\n          rightBox: box2,\n          cumulativeScore: score,\n          standingPins,\n          extraBox: box3\n        });\n      }\n    };\n\n    [...Array(10)].forEach((_, frame) => {\n      if (isStrike()) {\n        score += 10 + strikeBonus();\n        saveFrame(scoreData, \"\", \"X\", score, 10);\n        frameIndex++;\n      } else if (isSpare()) {\n        score += 10 + spareBonus();\n        saveFrame(scoreData, roll1(), \"/\", score, 10);\n        frameIndex += 2;\n      } else {\n        score += sumOfFrameRolls();\n        const standingPins = roll2() !== undefined ? 10 : 10 - roll1();\n        saveFrame(scoreData, roll1(), roll2(), score, standingPins);\n        frameIndex += 2;\n      }\n    });\n\n    return scoreData;\n  };\n}\n\nexport default BowlingGame;\n"]},"metadata":{},"sourceType":"module"}