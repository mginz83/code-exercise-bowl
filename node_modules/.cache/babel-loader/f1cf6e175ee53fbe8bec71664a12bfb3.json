{"ast":null,"code":"class BowlingGame {\n  constructor() {\n    this.roll = pins => this.rolls[this.currentRole++] = pins;\n\n    this.reset = () => {\n      this.rolls = [];\n      this.currentRole = 0;\n    };\n\n    this.standingPins = () => {\n      const scoreData = this.score();\n      let standingPins = 10;\n      scoreData.forEach(scoreData => {\n        if (scoreData.pinsUp !== null) {\n          standingPins = scoreData.pinsUp;\n        }\n      });\n      return standingPins;\n    };\n\n    this.score = () => {\n      let scoreData = [];\n      let score = 0;\n      let frameIndex = 0;\n\n      const firstRoll = () => this.rolls[frameIndex];\n\n      const secondRoll = () => this.rolls[frameIndex + 1];\n\n      const extraStrikeRoll = () => this.rolls[frameIndex + 2];\n\n      const totalForFrame = () => firstRoll() + secondRoll();\n\n      const spareBonus = () => extraStrikeRoll();\n\n      const strikeBonus = () => secondRoll() + extraStrikeRoll();\n\n      const isStrike = () => firstRoll() === 10;\n\n      const isSpare = () => totalForFrame() === 10;\n\n      const saveFrame = (scoreData, leftBox, rightBox, score, pinsUp) => {\n        if (scoreData.length < 9) {\n          scoreData.push({\n            leftBox,\n            rightBox,\n            cumulativeScore: score,\n            pinsUp\n          });\n        } else {\n          const box1 = firstRoll() === 10 ? \"X\" : firstRoll();\n          const box2 = secondRoll() === 10 ? \"X\" : isSpare() ? \"/\" : secondRoll();\n          let box3;\n\n          if (extraStrikeRoll() === 10) {\n            box3 = \"X\";\n          } else if (firstRoll() === 10 || firstRoll() + secondRoll() === 10) {\n            box3 = extraStrikeRoll();\n          } else {\n            box3 = \"\";\n          }\n\n          scoreData.push({\n            leftBox: box1,\n            rightBox: box2,\n            cumulativeScore: score,\n            pinsUp,\n            extraBox: box3\n          });\n        }\n      };\n\n      [...Array(10)].forEach((_, frame) => {\n        if (isStrike()) {\n          score += 10 + strikeBonus();\n          saveFrame(scoreData, \"\", \"X\", score, 10);\n          frameIndex++;\n        } else if (isSpare()) {\n          score += 10 + spareBonus();\n          saveFrame(scoreData, firstRoll(), \"/\", score, 10);\n          frameIndex += 2;\n        } else {\n          score += totalForFrame();\n          const pinsUp = secondRoll() !== undefined ? 10 : 10 - firstRoll();\n          saveFrame(scoreData, firstRoll(), secondRoll(), score, pinsUp);\n          frameIndex += 2;\n        }\n      });\n      return scoreData;\n    };\n\n    this.rolls = [];\n    this.currentRole = 0;\n  }\n\n}\n\nBowlingGame.newBowlingGame = () => new BowlingGame();\n\nexport default BowlingGame;","map":{"version":3,"sources":["/Users/mattginsberg/Desktop/bowling-app/src/components/BowlingGame.js"],"names":["BowlingGame","constructor","roll","pins","rolls","currentRole","reset","standingPins","scoreData","score","forEach","pinsUp","frameIndex","firstRoll","secondRoll","extraStrikeRoll","totalForFrame","spareBonus","strikeBonus","isStrike","isSpare","saveFrame","leftBox","rightBox","length","push","cumulativeScore","box1","box2","box3","extraBox","Array","_","frame","undefined","newBowlingGame"],"mappings":"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","sourcesContent":["\n\n\nclass BowlingGame {\n  constructor() {\n    this.rolls = [];\n    this.currentRole = 0;\n  }\n\n  static newBowlingGame = () => new BowlingGame();\n\n  roll = pins => (this.rolls[this.currentRole++] = pins);\n\n  reset = () => {\n    this.rolls = [];\n    this.currentRole = 0;\n  };\n\n  standingPins = () => {\n    const scoreData = this.score();\n    let standingPins = 10;\n    scoreData.forEach(scoreData => {\n      if (scoreData.pinsUp !== null) {\n        standingPins = scoreData.pinsUp;\n      }\n    });\n    return standingPins;\n  };\n\n  score = () => {\n    let scoreData = [];\n    let score = 0;\n    let frameIndex = 0;\n\n    const firstRoll = () => this.rolls[frameIndex];\n    const secondRoll = () => this.rolls[frameIndex + 1];\n    const extraStrikeRoll = () => this.rolls[frameIndex + 2];\n\n    const totalForFrame = () => firstRoll() + secondRoll();\n\n    const spareBonus = () => extraStrikeRoll();\n\n    const strikeBonus = () => secondRoll() + extraStrikeRoll();\n\n    const isStrike = () => firstRoll() === 10;\n\n    const isSpare = () => totalForFrame() === 10;\n\n    const saveFrame = (scoreData, leftBox, rightBox, score, pinsUp) => {\n      if (scoreData.length < 9) {\n        scoreData.push({\n          leftBox,\n          rightBox,\n          cumulativeScore: score,\n          pinsUp\n        });\n      } else {\n        const box1 = firstRoll() === 10 ? \"X\" : firstRoll();\n        const box2 = secondRoll() === 10 ? \"X\" : isSpare() ? \"/\" : secondRoll();\n        let box3;\n        if (extraStrikeRoll() === 10) {\n          box3 = \"X\";\n        } else if (firstRoll() === 10 || firstRoll() + secondRoll() === 10) {\n          box3 = extraStrikeRoll();\n        } else {\n          box3 = \"\";\n        }\n\n        scoreData.push({\n          leftBox: box1,\n          rightBox: box2,\n          cumulativeScore: score,\n          pinsUp,\n          extraBox: box3\n        });\n      }\n    };\n\n    [...Array(10)].forEach((_, frame) => {\n      if (isStrike()) {\n        score += 10 + strikeBonus();\n        saveFrame(scoreData, \"\", \"X\", score, 10);\n        frameIndex++;\n      } else if (isSpare()) {\n        score += 10 + spareBonus();\n        saveFrame(scoreData, firstRoll(), \"/\", score, 10);\n        frameIndex += 2;\n      } else {\n        score += totalForFrame();\n        const pinsUp = secondRoll() !== undefined ? 10 : 10 - firstRoll();\n        saveFrame(scoreData, firstRoll(), secondRoll(), score, pinsUp);\n        frameIndex += 2;\n      }\n    });\n\n    return scoreData;\n  };\n}\n\nexport default BowlingGame;\n"]},"metadata":{},"sourceType":"module"}