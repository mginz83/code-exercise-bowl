{"ast":null,"code":"class BowlingGame {\n  constructor() {\n    this.roll = pins => this.rolls[this.currentRole++] = pins;\n\n    this.reset = () => {\n      this.rolls = [];\n      this.currentRole = 0;\n    };\n\n    this.standingPins = () => {\n      const scoreData = this.score();\n      let standingPins = 10;\n      scoreData.forEach(o => {\n        if (o.standingPins !== null && !isNaN(o.standingPins)) {\n          standingPins = o.standingPins;\n        }\n      });\n      return standingPins;\n    };\n\n    this.bowlType = (roll1, roll2, roll3) => {\n      let type;\n\n      if (roll1 === 10) {\n        type = 'strike';\n      }\n\n      if (roll1 + roll2 === 10) {\n        type = 'spare';\n      }\n\n      return type;\n    };\n\n    this.score = () => {\n      let scoreData = [];\n      let score = 0;\n      let frameIndex = 0;\n\n      const roll1 = () => this.rolls[frameIndex];\n\n      const roll2 = () => this.rolls[frameIndex + 1];\n\n      const roll3 = () => this.rolls[frameIndex + 2];\n\n      const saveFrame = (scoreData, leftBox, rightBox, score, standingPins) => {\n        if (scoreData.length < 9) {\n          scoreData.push({\n            leftBox,\n            rightBox,\n            cumulativeScore: score,\n            standingPins\n          });\n        } else {\n          const box1 = roll1() === 10 ? \"X\" : roll1();\n          const box2 = roll2() === 10 ? \"X\" : roll1() + roll2() === 10 ? \"/\" : roll2();\n          let box3;\n\n          if (roll3() === 10) {\n            box3 = \"X\";\n          } else if (roll1() === 10 || roll1() + roll2() === 10) {\n            box3 = roll3();\n          } else {\n            box3 = \"\";\n          }\n\n          scoreData.push({\n            leftBox: box1,\n            rightBox: box2,\n            cumulativeScore: score,\n            standingPins,\n            extraBox: box3\n          });\n        }\n      };\n\n      [...Array(10)].forEach((_, frame) => {\n        switch (this.bowlType(roll1, roll2, roll3)) {\n          case 'strike':\n            score += 10 + roll2() + roll3();\n            saveFrame(scoreData, \"\", \"X\", score, 10);\n            frameIndex++;\n            break;\n\n          case 'spare':\n            score += 10 + roll3();\n            saveFrame(scoreData, roll1(), \"/\", score, 10);\n            frameIndex += 2;\n            break;\n\n          default:\n            score += roll1() + roll2();\n            const standingPins = roll2() !== undefined ? 10 : 10 - roll1();\n            saveFrame(scoreData, roll1(), roll2(), score, standingPins);\n            frameIndex += 2;\n            break;\n        }\n      });\n      return scoreData;\n    };\n\n    this.rolls = [];\n    this.currentRole = 0;\n  }\n\n}\n\nBowlingGame.create = () => new BowlingGame();\n\nexport default BowlingGame;","map":{"version":3,"sources":["/Users/mattginsberg/Desktop/bowling-app/src/components/BowlingGame.js"],"names":["BowlingGame","constructor","roll","pins","rolls","currentRole","reset","standingPins","scoreData","score","forEach","o","isNaN","bowlType","roll1","roll2","roll3","type","frameIndex","saveFrame","leftBox","rightBox","length","push","cumulativeScore","box1","box2","box3","extraBox","Array","_","frame","undefined","create"],"mappings":"AAAA,MAAMA,WAAN,CAAkB;AAChBC,EAAAA,WAAW,GAAG;AAAA,SAOdC,IAPc,GAOPC,IAAI,IAAK,KAAKC,KAAL,CAAW,KAAKC,WAAL,EAAX,IAAiCF,IAPnC;;AAAA,SASdG,KATc,GASN,MAAM;AACZ,WAAKF,KAAL,GAAa,EAAb;AACA,WAAKC,WAAL,GAAmB,CAAnB;AACD,KAZa;;AAAA,SAcdE,YAdc,GAcC,MAAM;AACnB,YAAMC,SAAS,GAAG,KAAKC,KAAL,EAAlB;AACA,UAAIF,YAAY,GAAG,EAAnB;AACAC,MAAAA,SAAS,CAACE,OAAV,CAAkBC,CAAC,IAAI;AACrB,YAAIA,CAAC,CAACJ,YAAF,KAAmB,IAAnB,IAA2B,CAACK,KAAK,CAACD,CAAC,CAACJ,YAAH,CAArC,EAAuD;AACrDA,UAAAA,YAAY,GAAGI,CAAC,CAACJ,YAAjB;AACD;AACF,OAJD;AAKA,aAAOA,YAAP;AACD,KAvBa;;AAAA,SAyBdM,QAzBc,GAyBH,CAACC,KAAD,EAAQC,KAAR,EAAeC,KAAf,KAAyB;AAClC,UAAIC,IAAJ;;AAEA,UAAIH,KAAK,KAAK,EAAd,EAAkB;AAChBG,QAAAA,IAAI,GAAG,QAAP;AACD;;AACD,UAAKH,KAAK,GAAGC,KAAT,KAAoB,EAAxB,EAA4B;AAC1BE,QAAAA,IAAI,GAAG,OAAP;AACD;;AAED,aAAOA,IAAP;AAED,KArCa;;AAAA,SAsCdR,KAtCc,GAsCN,MAAM;AACZ,UAAID,SAAS,GAAG,EAAhB;AACA,UAAIC,KAAK,GAAG,CAAZ;AACA,UAAIS,UAAU,GAAG,CAAjB;;AAEA,YAAMJ,KAAK,GAAG,MAAM,KAAKV,KAAL,CAAWc,UAAX,CAApB;;AACA,YAAMH,KAAK,GAAG,MAAM,KAAKX,KAAL,CAAWc,UAAU,GAAG,CAAxB,CAApB;;AACA,YAAMF,KAAK,GAAG,MAAM,KAAKZ,KAAL,CAAWc,UAAU,GAAG,CAAxB,CAApB;;AAEA,YAAMC,SAAS,GAAG,CAACX,SAAD,EAAYY,OAAZ,EAAqBC,QAArB,EAA+BZ,KAA/B,EAAsCF,YAAtC,KAAuD;AACvE,YAAIC,SAAS,CAACc,MAAV,GAAmB,CAAvB,EAA0B;AACxBd,UAAAA,SAAS,CAACe,IAAV,CAAe;AACbH,YAAAA,OADa;AAEbC,YAAAA,QAFa;AAGbG,YAAAA,eAAe,EAAEf,KAHJ;AAIbF,YAAAA;AAJa,WAAf;AAMD,SAPD,MAOO;AACL,gBAAMkB,IAAI,GAAGX,KAAK,OAAO,EAAZ,GAAiB,GAAjB,GAAuBA,KAAK,EAAzC;AACA,gBAAMY,IAAI,GAAGX,KAAK,OAAO,EAAZ,GAAiB,GAAjB,GAAwBD,KAAK,KAAKC,KAAK,EAAhB,KAAwB,EAAxB,GAA6B,GAA7B,GAAmCA,KAAK,EAA5E;AACA,cAAIY,IAAJ;;AACA,cAAIX,KAAK,OAAO,EAAhB,EAAoB;AAClBW,YAAAA,IAAI,GAAG,GAAP;AACD,WAFD,MAEO,IAAIb,KAAK,OAAO,EAAZ,IAAkBA,KAAK,KAAKC,KAAK,EAAf,KAAsB,EAA5C,EAAgD;AACrDY,YAAAA,IAAI,GAAGX,KAAK,EAAZ;AACD,WAFM,MAEA;AACLW,YAAAA,IAAI,GAAG,EAAP;AACD;;AAEDnB,UAAAA,SAAS,CAACe,IAAV,CAAe;AACbH,YAAAA,OAAO,EAAEK,IADI;AAEbJ,YAAAA,QAAQ,EAAEK,IAFG;AAGbF,YAAAA,eAAe,EAAEf,KAHJ;AAIbF,YAAAA,YAJa;AAKbqB,YAAAA,QAAQ,EAAED;AALG,WAAf;AAOD;AACF,OA5BD;;AA8BA,OAAC,GAAGE,KAAK,CAAC,EAAD,CAAT,EAAenB,OAAf,CAAuB,CAACoB,CAAD,EAAIC,KAAJ,KAAc;AACnC,gBAAQ,KAAKlB,QAAL,CAAcC,KAAd,EAAqBC,KAArB,EAA4BC,KAA5B,CAAR;AACE,eAAK,QAAL;AACCP,YAAAA,KAAK,IAAI,KAAKM,KAAK,EAAV,GAAeC,KAAK,EAA7B;AACAG,YAAAA,SAAS,CAACX,SAAD,EAAY,EAAZ,EAAgB,GAAhB,EAAqBC,KAArB,EAA4B,EAA5B,CAAT;AACAS,YAAAA,UAAU;AACT;;AACF,eAAK,OAAL;AACET,YAAAA,KAAK,IAAI,KAAKO,KAAK,EAAnB;AACAG,YAAAA,SAAS,CAACX,SAAD,EAAYM,KAAK,EAAjB,EAAqB,GAArB,EAA0BL,KAA1B,EAAiC,EAAjC,CAAT;AACAS,YAAAA,UAAU,IAAI,CAAd;AACA;;AACF;AACET,YAAAA,KAAK,IAAIK,KAAK,KAAKC,KAAK,EAAxB;AACA,kBAAMR,YAAY,GAAGQ,KAAK,OAAOiB,SAAZ,GAAwB,EAAxB,GAA6B,KAAKlB,KAAK,EAA5D;AACAK,YAAAA,SAAS,CAACX,SAAD,EAAYM,KAAK,EAAjB,EAAqBC,KAAK,EAA1B,EAA8BN,KAA9B,EAAqCF,YAArC,CAAT;AACAW,YAAAA,UAAU,IAAI,CAAd;AACA;AAhBJ;AAkBD,OAnBD;AAqBA,aAAOV,SAAP;AACD,KAnGa;;AACZ,SAAKJ,KAAL,GAAa,EAAb;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACD;;AAJe;;AAAZL,W,CAMGiC,M,GAAS,MAAM,IAAIjC,WAAJ,E;;AAiGxB,eAAeA,WAAf","sourcesContent":["class BowlingGame {\n  constructor() {\n    this.rolls = [];\n    this.currentRole = 0;\n  }\n\n  static create = () => new BowlingGame();\n\n  roll = pins => (this.rolls[this.currentRole++] = pins);\n\n  reset = () => {\n    this.rolls = [];\n    this.currentRole = 0;\n  };\n\n  standingPins = () => {\n    const scoreData = this.score();\n    let standingPins = 10;\n    scoreData.forEach(o => {\n      if (o.standingPins !== null && !isNaN(o.standingPins)) {\n        standingPins = o.standingPins;\n      }\n    });\n    return standingPins;\n  };\n\n  bowlType = (roll1, roll2, roll3) => {\n    let type;\n\n    if (roll1 === 10) {\n      type = 'strike';\n    }\n    if ((roll1 + roll2) === 10) {\n      type = 'spare';\n    }\n\n    return type;\n\n  }\n  score = () => {\n    let scoreData = [];\n    let score = 0;\n    let frameIndex = 0;\n\n    const roll1 = () => this.rolls[frameIndex];\n    const roll2 = () => this.rolls[frameIndex + 1];\n    const roll3 = () => this.rolls[frameIndex + 2];\n\n    const saveFrame = (scoreData, leftBox, rightBox, score, standingPins) => {\n      if (scoreData.length < 9) {\n        scoreData.push({\n          leftBox,\n          rightBox,\n          cumulativeScore: score,\n          standingPins\n        });\n      } else {\n        const box1 = roll1() === 10 ? \"X\" : roll1();\n        const box2 = roll2() === 10 ? \"X\" : (roll1() + roll2()) === 10 ? \"/\" : roll2();\n        let box3;\n        if (roll3() === 10) {\n          box3 = \"X\";\n        } else if (roll1() === 10 || roll1() + roll2() === 10) {\n          box3 = roll3();\n        } else {\n          box3 = \"\";\n        }\n\n        scoreData.push({\n          leftBox: box1,\n          rightBox: box2,\n          cumulativeScore: score,\n          standingPins,\n          extraBox: box3\n        });\n      }\n    };\n\n    [...Array(10)].forEach((_, frame) => {\n      switch (this.bowlType(roll1, roll2, roll3)) {\n        case 'strike':\n         score += 10 + roll2() + roll3();\n         saveFrame(scoreData, \"\", \"X\", score, 10);\n         frameIndex++;\n          break;\n        case 'spare':\n          score += 10 + roll3();\n          saveFrame(scoreData, roll1(), \"/\", score, 10);\n          frameIndex += 2;\n          break;\n        default:\n          score += roll1() + roll2();\n          const standingPins = roll2() !== undefined ? 10 : 10 - roll1();\n          saveFrame(scoreData, roll1(), roll2(), score, standingPins);\n          frameIndex += 2;\n          break;\n      }\n    });\n\n    return scoreData;\n  };\n}\n\nexport default BowlingGame;\n"]},"metadata":{},"sourceType":"module"}