{"ast":null,"code":"import { frameSum, isStrike, isSpare, bonusForStrike, bonusForSpare } from './HelperFunctions';\n\nclass BowlingGame {\n  constructor() {\n    this.roll = pins => this.rolls[this.currentRole++] = pins;\n\n    this.reset = () => {\n      this.rolls = [];\n      this.currentRole = 0;\n    };\n\n    this.standingPins = () => {\n      const scoreData = this.score();\n      let pinsUp = 10;\n      scoreData.forEach(o => {\n        if (o.pinsUp !== null && !isNaN(o.pinsUp)) {\n          pinsUp = o.pinsUp;\n        }\n      });\n      return pinsUp;\n    };\n\n    this.score = () => {\n      let scoreData = [];\n      let score = 0;\n      let frameIndex = 0;\n\n      const roll1 = () => this.rolls[frameIndex];\n\n      const roll2 = () => this.rolls[frameIndex + 1];\n\n      const roll3 = () => this.rolls[frameIndex + 2];\n\n      const sumOfFrameRolls = () => roll1() + roll2();\n\n      const spareBonus = () => roll3();\n\n      const strikeBonus = () => roll2() + roll3();\n\n      const isStrike = () => roll1() === 10;\n\n      const isSpare = () => sumOfFrameRolls() === 10;\n\n      const saveFrame = (scoreData, leftBox, rightBox, score, pinsUp) => {\n        if (scoreData.length < 9) {\n          scoreData.push({\n            leftBox,\n            rightBox,\n            cumulativeScore: score,\n            pinsUp\n          });\n        } else {\n          const box1 = roll1() === 10 ? \"X\" : roll1();\n          const box2 = roll2() === 10 ? \"X\" : isSpare() ? \"/\" : roll2();\n          let box3;\n\n          if (roll3() === 10) {\n            box3 = \"X\";\n          } else if (roll1() === 10 || roll1() + roll2() === 10) {\n            box3 = roll3();\n          } else {\n            box3 = \"\";\n          }\n\n          scoreData.push({\n            leftBox: box1,\n            rightBox: box2,\n            cumulativeScore: score,\n            pinsUp,\n            extraBox: box3\n          });\n        }\n      };\n\n      [...Array(10)].forEach((_, frame) => {\n        if (isStrike()) {\n          score += 10 + strikeBonus();\n          saveFrame(scoreData, \"\", \"X\", score, 10);\n          frameIndex++;\n        } else if (isSpare()) {\n          score += 10 + spareBonus();\n          saveFrame(scoreData, roll1(), \"/\", score, 10);\n          frameIndex += 2;\n        } else {\n          score += sumOfFrameRolls();\n          const pinsUp = roll2() !== undefined ? 10 : 10 - roll1();\n          saveFrame(scoreData, roll1(), roll2(), score, pinsUp);\n          frameIndex += 2;\n        }\n      });\n      return scoreData;\n    };\n\n    this.rolls = [];\n    this.currentRole = 0;\n  }\n\n}\n\nBowlingGame.create = () => new BowlingGame();\n\nexport default BowlingGame;","map":{"version":3,"sources":["/Users/mattginsberg/Desktop/bowling-app/src/components/BowlingGame.js"],"names":["frameSum","isStrike","isSpare","bonusForStrike","bonusForSpare","BowlingGame","constructor","roll","pins","rolls","currentRole","reset","standingPins","scoreData","score","pinsUp","forEach","o","isNaN","frameIndex","roll1","roll2","roll3","sumOfFrameRolls","spareBonus","strikeBonus","saveFrame","leftBox","rightBox","length","push","cumulativeScore","box1","box2","box3","extraBox","Array","_","frame","undefined","create"],"mappings":"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","sourcesContent":["import {frameSum, isStrike, isSpare, bonusForStrike, bonusForSpare} from './HelperFunctions';\n\nclass BowlingGame {\n  constructor() {\n    this.rolls = [];\n    this.currentRole = 0;\n  }\n\n  static create = () => new BowlingGame();\n\n  roll = pins => (this.rolls[this.currentRole++] = pins);\n\n  reset = () => {\n    this.rolls = [];\n    this.currentRole = 0;\n  };\n\n  standingPins = () => {\n    const scoreData = this.score();\n    let pinsUp = 10;\n    scoreData.forEach(o => {\n      if (o.pinsUp !== null && !isNaN(o.pinsUp)) {\n        pinsUp = o.pinsUp;\n      }\n    });\n    return pinsUp;\n  };\n\n  score = () => {\n    let scoreData = [];\n    let score = 0;\n    let frameIndex = 0;\n\n    const roll1 = () => this.rolls[frameIndex];\n    const roll2 = () => this.rolls[frameIndex + 1];\n    const roll3 = () => this.rolls[frameIndex + 2];\n\n    const sumOfFrameRolls = () => roll1() + roll2();\n\n    const spareBonus = () => roll3();\n\n    const strikeBonus = () => roll2() + roll3();\n\n    const isStrike = () => roll1() === 10;\n\n    const isSpare = () => sumOfFrameRolls() === 10;\n\n    const saveFrame = (scoreData, leftBox, rightBox, score, pinsUp) => {\n      if (scoreData.length < 9) {\n        scoreData.push({\n          leftBox,\n          rightBox,\n          cumulativeScore: score,\n          pinsUp\n        });\n      } else {\n        const box1 = roll1() === 10 ? \"X\" : roll1();\n        const box2 = roll2() === 10 ? \"X\" : isSpare() ? \"/\" : roll2();\n        let box3;\n        if (roll3() === 10) {\n          box3 = \"X\";\n        } else if (roll1() === 10 || roll1() + roll2() === 10) {\n          box3 = roll3();\n        } else {\n          box3 = \"\";\n        }\n\n        scoreData.push({\n          leftBox: box1,\n          rightBox: box2,\n          cumulativeScore: score,\n          pinsUp,\n          extraBox: box3\n        });\n      }\n    };\n\n    [...Array(10)].forEach((_, frame) => {\n      if (isStrike()) {\n        score += 10 + strikeBonus();\n        saveFrame(scoreData, \"\", \"X\", score, 10);\n        frameIndex++;\n      } else if (isSpare()) {\n        score += 10 + spareBonus();\n        saveFrame(scoreData, roll1(), \"/\", score, 10);\n        frameIndex += 2;\n      } else {\n        score += sumOfFrameRolls();\n        const pinsUp = roll2() !== undefined ? 10 : 10 - roll1();\n        saveFrame(scoreData, roll1(), roll2(), score, pinsUp);\n        frameIndex += 2;\n      }\n    });\n\n    return scoreData;\n  };\n}\n\nexport default BowlingGame;\n"]},"metadata":{},"sourceType":"module"}